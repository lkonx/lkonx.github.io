<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL数据库基础</title>
    <link href="/2020/10/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/10/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来自课堂学习笔记<br><a href="http://www.it666.com/">www.it666.com</a></p></blockquote><h1 id="数据库增删改查"><a href="#数据库增删改查" class="headerlink" title="数据库增删改查"></a><strong>数据库增删改查</strong></h1><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a><strong>新建数据库</strong></h2><pre><code>create database if not exists 数据库名称 charset=字符集;</code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a><strong>删除数据库</strong></h2><pre><code>drop database if exists 数据库名称;</code></pre><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a><strong>修改数据库</strong></h2><pre><code>alter database 数据库名称 charset=字符集;</code></pre><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a><strong>查看数据库</strong></h2><pre><code>show create database 数据库名称;show databases;</code></pre><h1 id="表增删改查"><a href="#表增删改查" class="headerlink" title="表增删改查"></a><strong>表增删改查</strong></h1><p><strong>注意点:<br>在对数据库的表进行操作的时候(增删改查), 都必须先告诉MySQL我们要操作的是哪一个数据库</strong></p><pre><code>use 数据库名称;</code></pre><h2 id="查看数据库中有哪些表"><a href="#查看数据库中有哪些表" class="headerlink" title="查看数据库中有哪些表"></a><strong>查看数据库中有哪些表</strong></h2><pre><code>show tables;</code></pre><h2 id="查看指定表的结构"><a href="#查看指定表的结构" class="headerlink" title="查看指定表的结构"></a><strong>查看指定表的结构</strong></h2><pre><code>desc 表名;</code></pre><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a><strong>创建表</strong></h2><pre><code>create table if not exists 表名(  字段名称 数据类型,  字段名称 数据类型,);</code></pre><p><strong>注意点: 以上代码创建表, 没有就会创建一个新的, 有就会自动跳过</strong></p><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a><strong>删除表</strong></h2><pre><code>drop table if exists 表名;</code></pre><p><strong>注意点: 以上语句, 如果需要删除的表存在, 那么就直接删除, 如果不存在就跳过</strong></p><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a><strong>修改表</strong></h2><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a><strong>修改表名</strong></h3><pre><code>rename table 原始名称 to 新的名称;</code></pre><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a><strong>添加字段</strong></h3><pre><code>alter table 表名 add 新增字段名称 新增字段数据类型;</code></pre><p><strong>注意点:</strong> </p><p><strong>默认情况下会将新增的字段放到原有字段的后面</strong></p><pre><code>alter table 表名 add 字段名 数据类型 first;</code></pre><p><strong>我们可以通过指定first将新增的字段放到原有字段的前面</strong></p><pre><code>alter table 表名 add 字段名 数据类型 after 字段名;</code></pre><p><strong>我们可以通过after指定将新增的字段放到哪个字段的后面</strong></p><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a><strong>删除字段</strong></h3><pre><code>alter table 表名 drop 字段名称;</code></pre><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a><strong>修改字段</strong></h3><h4 id="修改字段的数据类型"><a href="#修改字段的数据类型" class="headerlink" title="修改字段的数据类型"></a><strong>修改字段的数据类型</strong></h4><pre><code>alter table 表名 modify 需要修改的字段名称 新的数据类型</code></pre><h4 id="修改字段的名称和数据类型"><a href="#修改字段的名称和数据类型" class="headerlink" title="修改字段的名称和数据类型"></a><strong>修改字段的名称和数据类型</strong></h4><pre><code>alter table 表名 change 原始字段名称 新的字段名称 新的数据类型;</code></pre><h1 id="数据增删改查"><a href="#数据增删改查" class="headerlink" title="数据增删改查"></a><strong>数据增删改查</strong></h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a><strong>插入数据</strong></h2><pre><code>insert into 表名 (字段名称1, 字段名称2) values (值1, 值2);</code></pre><p><strong>注意点:</strong> </p><p><strong>在插入数据的时候指定的字段名称的顺序不用和表中的字段名称的顺序一致<br>在插入数据的时候指定的取值顺序必须和指定的字段名称顺序一致<br>如果插入数据时指定的取值顺序和表中的字段顺序是一致的, 那么可以不指定字段名称</strong></p><pre><code> insert into  stu values (值1, 值2), (值1, 值2);</code></pre><p><strong>注意点: 我们可以通过values同时插入多条数据</strong></p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a><strong>更新数据</strong></h2><pre><code>update 表名 set 字段名称=值 [where 条件];</code></pre><p><strong>注意点:</strong></p><p><strong>如果在更新数据的时候没有指定条件, 那么就会更新整张表中的数据<br>如果在更新数据的时候指定了条件, 那么只会更新满足条件的数据<br>在指定条件的时候, 我们可以通过AND来指定多个条件, AND<br>在指定条件的时候, 我们可以通过OR来指定多个条件, OR<br>在更新数据的时候是可以同时更新多个字段的,字段之间用逗号隔开</strong></p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a><strong>查询数据</strong></h2><p><strong>注意点:</strong> </p><p><strong>以下方式会将表中所有的数据都查询出来, 所以性能比较差, 不能查询特定字段的值</strong></p><pre><code>select * from 表名;</code></pre><p><strong>以下才是查询数据完整的写法</strong></p><pre><code>select 字段名称1, 字段名称2 from 表名 where 条件;</code></pre><p><strong>查询特定字段的数据</strong></p><pre><code>select 字段名称1 from 表名;</code></pre><p><strong>where支持的运算符</strong></p><ul><li>=、!=、&lt;&gt;、&lt;、&lt;=、&gt;、&gt;=；</li><li>IN(X,Y)；固定的范围值</li><li>BETWEEN X AND Y；值在什么范围</li><li>IS NULL；（为空） </li><li>IS NOT NULL；（不为空）</li><li>AND；与</li><li>OR；或</li><li>NOT；非</li><li>LIKE: 模糊查询</li></ul><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><strong>删除数据</strong></h2><pre><code>delete from 表名 where 条件;</code></pre><p><strong>删除所有的数据</strong></p><pre><code>delete from 表名;</code></pre><h1 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a><strong>MySQL存储引擎</strong></h1><ul><li><h2 id="MySQL中的三种存储引擎"><a href="#MySQL中的三种存储引擎" class="headerlink" title="MySQL中的三种存储引擎"></a><strong>MySQL中的三种存储引擎</strong></h2><ul><li>MyISAM: 安全性低, 但不支持事务和外键, 适合频繁插入和查询的应用</li><li>InnoDB(默认): 安全性高, 支持事务和外键, 适合对安全性, 数据完整性要求较高的应用</li><li>Memory: 访问速度极快, 但不会永久存储数据, 适合对读写速度要求较高的应用</li></ul></li></ul><p>创建时指定存储引擎</p><pre><code>create table if not exists 表名(          字段名称 数据类型,          字段名称 数据类型,        )engine=引擎名称;</code></pre><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a><strong>InnoDB</strong></h3><p>如果表的存储引擎是InnoDB, 那么只要创建表就会自动创建一个文件, 这个文件就保存了这张表的结构, 如果往InnoDB的表中存储数据, 那么数据会被存储到ibdata1的文件中, 如果存储的数据比较多, 那么系统会自动再创建ibdata2, ibdata3, …文件</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a><strong>MyISAM</strong></h3><p>如果表的存储引擎是MyISAM, 那么只要创建表就会自动创建三个文件</p><ul><li>.sdi这个文件就保存了这张表的结构</li><li>.MYD这个文件就保存了这张表中存储的数据</li><li>.MYI这个文件就保存了这张表中的索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a><strong>Memory</strong></h3><p>如果表的存储引擎是Memory, 那么只要创建表就会自动创建一个文件,这个文件就保存了这张表的结构<br><strong>注意点: 如果表的存储引擎是Memory, 那么就不会像InnoDB/MyISAM将数据保存到文件中了, 而是直接保存到内存中</strong></p><h2 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a><strong>修改存储引擎</strong></h2><pre><code>alter table 表名 engine=引擎名称;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
